The ``1-my_list`` module
========================

Using ``1-my_list``
-------------------

First, import the ``MyList`` class from ``1-my_list``.

    >>> MyList = __import__("1-my_list").MyList

Use cases:
    >>> a = MyList()
    >>> b = MyList(1)
    Traceback (most recent call last):
    ...
    TypeError: 'int' object is not iterable
    >>> c = MyList(0.3)
    Traceback (most recent call last):
    ...
    TypeError: 'float' object is not iterable
    >>> d = MyList(complex())
    Traceback (most recent call last):
    ...
    TypeError: 'complex' object is not iterable
    >>> e = MyList(None)
    Traceback (most recent call last):
    ...
    TypeError: 'NoneType' object is not iterable
    >>> f = MyList(True)
    Traceback (most recent call last):
    ...
    TypeError: 'bool' object is not iterable
    >>> g = MyList(())
    >>> h = MyList()
    >>> i = MyList(range(10))
    >>> j = MyList([])
    >>> k = MyList("God loves you, surrender to him.")
    >>> l = MyList({"a": 1, "b": 2})
    >>> m = MyList({0, 2, 3})

    >>> m.append()
    Traceback (most recent call last):
    ...
    TypeError: append() takes exactly one argument (0 given)
    >>> m.append(4)
    >>> m.print_sorted()
    [0, 2, 3, 4]
    [0, 2, 3, 4]
    >>> m.append(1)
    >>> m.print_sorted()
    [0, 1, 2, 3, 4]
    [0, 1, 2, 3, 4]
    >>> m.append(-1)
    [-1, 0, 1, 2, 3, 4]
    [-1, 0, 1, 2, 3, 4]
    >>> h.print_sorted()
    []
    []
    >>> n = m.print_sorted()
    [-1, 0, 1, 2, 3, 4]
    [-1, 0, 1, 2, 3, 4]
    >>> n
    [-1, 0, 1, 2, 3, 4]